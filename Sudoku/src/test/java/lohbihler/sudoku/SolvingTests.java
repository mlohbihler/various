package lohbihler.sudoku;

import org.junit.Assert;
import org.junit.Test;

public class SolvingTests {
    @Test
    public void simple2x2() {
        Assert.assertTrue(solve(new char[][] { //
                { '1', ' ', ' ', ' ' }, //
                { ' ', '2', '1', '4' }, //
                { ' ', ' ', '2', ' ' }, //
                { ' ', ' ', ' ', '1' }, //
        }));
    }

    @Test
    public void p1_3x3() {
        Assert.assertTrue(solve(new char[][] { //
                { ' ', ' ', '7', ' ', ' ', '6', ' ', ' ', '8' }, //
                { ' ', ' ', ' ', '8', ' ', ' ', ' ', '2', '4' }, //
                { ' ', ' ', ' ', ' ', '1', ' ', ' ', '6', '3' }, //
                { ' ', ' ', ' ', ' ', '2', '5', '4', ' ', '9' }, //
                { ' ', '5', ' ', ' ', ' ', ' ', ' ', '1', ' ' }, //
                { '7', ' ', '4', '1', '9', ' ', ' ', ' ', ' ' }, //
                { '8', '2', ' ', ' ', '7', ' ', ' ', ' ', ' ' }, //
                { '4', '7', ' ', ' ', ' ', '8', ' ', ' ', ' ' }, //
                { '6', ' ', ' ', '4', ' ', ' ', '2', ' ', ' ' }, //
        }));
    }

    @Test
    public void p2_3x3() {
        Assert.assertTrue(solve(new char[][] { //
                { ' ', ' ', ' ', '3', ' ', ' ', '1', ' ', ' ' }, //
                { ' ', '4', ' ', ' ', ' ', '9', '6', ' ', '5' }, //
                { '3', ' ', ' ', '5', ' ', '7', ' ', '2', ' ' }, //
                { '2', ' ', '6', '7', '9', ' ', ' ', ' ', ' ' }, //
                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                { ' ', ' ', ' ', ' ', '3', '1', '5', ' ', '6' }, //
                { ' ', '1', ' ', '6', ' ', '8', ' ', ' ', '4' }, //
                { '6', ' ', '3', '4', ' ', ' ', ' ', '8', ' ' }, //
                { ' ', ' ', '8', ' ', ' ', '3', ' ', ' ', ' ' }, //
        }));
    }

    @Test
    public void p3_3x3() {
        Assert.assertTrue(solve(new char[][] { //
                { '9', ' ', ' ', '5', ' ', ' ', ' ', ' ', ' ' }, //
                { '2', '5', '3', ' ', ' ', ' ', ' ', '1', ' ' }, //
                { ' ', ' ', '1', '2', ' ', ' ', ' ', ' ', ' ' }, //
                { ' ', '6', ' ', ' ', '3', '2', ' ', ' ', '5' }, //
                { '1', ' ', ' ', '6', ' ', '8', ' ', ' ', '9' }, //
                { '3', ' ', ' ', '4', '9', ' ', ' ', '7', ' ' }, //
                { ' ', ' ', ' ', ' ', ' ', '4', '6', ' ', ' ' }, //
                { ' ', '9', ' ', ' ', ' ', ' ', '7', '4', '1' }, //
                { ' ', ' ', ' ', ' ', ' ', '9', ' ', ' ', '3' }, //
        }));
    }

    @Test
    public void p4_3x3() {
        Assert.assertTrue(solve(new char[][] { //
                { ' ', '2', ' ', ' ', ' ', ' ', ' ', '3', ' ' }, //
                { ' ', '8', ' ', ' ', ' ', ' ', ' ', ' ', '9' }, //
                { ' ', ' ', '4', '2', '3', ' ', ' ', ' ', '1' }, //
                { '4', ' ', '5', ' ', '8', '1', '9', ' ', ' ' }, //
                { '2', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '8' }, //
                { ' ', ' ', '8', '6', '9', ' ', '4', ' ', '3' }, //
                { '8', ' ', ' ', ' ', '5', '9', '1', ' ', ' ' }, //
                { '1', ' ', ' ', ' ', ' ', ' ', ' ', '9', ' ' }, //
                { ' ', '9', ' ', ' ', ' ', ' ', ' ', '6', ' ' }, //
        }));
    }

    @Test
    public void p5_3x3() {
        Assert.assertTrue(solve(new char[][] { //
                { ' ', ' ', '5', '6', ' ', '4', ' ', ' ', ' ' }, //
                { ' ', ' ', '7', ' ', ' ', '3', '4', '9', ' ' }, //
                { ' ', ' ', '3', ' ', ' ', '9', ' ', ' ', '7' }, //
                { ' ', ' ', ' ', ' ', ' ', '6', ' ', '8', ' ' }, //
                { ' ', '9', '4', ' ', ' ', ' ', '5', '2', ' ' }, //
                { ' ', '8', ' ', '4', ' ', ' ', ' ', ' ', ' ' }, //
                { '1', ' ', ' ', '5', ' ', ' ', '3', ' ', ' ' }, //
                { ' ', '4', '9', '3', ' ', ' ', '8', ' ', ' ' }, //
                { ' ', ' ', ' ', '9', ' ', '2', '1', ' ', ' ' }, //
        }));
    }

    @Test
    public void p6_3x3() {
        Assert.assertTrue(solve(new char[][] { //
                { ' ', ' ', '9', ' ', '8', ' ', ' ', ' ', '1' }, //
                { ' ', '8', ' ', ' ', '7', ' ', ' ', ' ', ' ' }, //
                { ' ', '6', ' ', '4', '2', '1', ' ', ' ', '5' }, //
                { ' ', ' ', '2', ' ', ' ', ' ', '1', ' ', '8' }, //
                { '8', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '4' }, //
                { '3', ' ', '5', ' ', ' ', ' ', '6', ' ', ' ' }, //
                { '4', ' ', ' ', '6', '1', '2', ' ', '5', ' ' }, //
                { ' ', ' ', ' ', ' ', '5', ' ', ' ', '4', ' ' }, //
                { '5', ' ', ' ', ' ', '4', ' ', '8', ' ', ' ' }, //
        }));
    }

    @Test
    public void p7_3x3() {
        Assert.assertTrue(solve(new char[][] { //
                { ' ', ' ', '9', '3', ' ', ' ', ' ', '7', ' ' }, //
                { ' ', ' ', '2', '4', ' ', ' ', '9', ' ', '3' }, //
                { ' ', '8', '7', ' ', ' ', '6', ' ', ' ', ' ' }, //
                { ' ', '2', '3', ' ', '5', ' ', ' ', ' ', ' ' }, //
                { ' ', ' ', ' ', '7', ' ', '2', ' ', ' ', ' ' }, //
                { ' ', ' ', ' ', ' ', '3', ' ', '1', '4', ' ' }, //
                { ' ', ' ', ' ', '1', ' ', ' ', '3', '5', ' ' }, //
                { '9', ' ', '1', ' ', ' ', '3', '7', ' ', ' ' }, //
                { ' ', '3', ' ', ' ', ' ', '7', '2', ' ', ' ' }, //
        }));
    }

    @Test
    public void p8_3x3() {
        Assert.assertTrue(solve(new char[][] { //
                { ' ', ' ', ' ', '3', '6', '7', '1', ' ', ' ' }, // 1x6
                { ' ', '1', ' ', ' ', '5', ' ', ' ', '9', ' ' }, // 2x3
                { '3', ' ', '5', ' ', '1', ' ', '6', ' ', '2' }, // 3x5
                { '4', ' ', ' ', ' ', ' ', '9', ' ', '5', ' ' }, // 4x1
                { ' ', ' ', '1', ' ', ' ', ' ', '7', ' ', ' ' }, // 5x5
                { '9', ' ', ' ', '1', ' ', '3', ' ', ' ', '6' }, // 6x4
                { '5', ' ', '6', ' ', '2', ' ', ' ', ' ', '3' }, // 7x3
                { ' ', '9', ' ', ' ', '3', ' ', ' ', '1', ' ' }, // 8x0
                { ' ', ' ', ' ', '7', '9', '5', ' ', ' ', '8' }, // 9x5
        }));
    }

    @Test
    public void p9_3x3() {
        Assert.assertFalse(solve(new char[][] { //
                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
        }));
    }

    @Test
    public void p10_3x3() {
        Assert.assertTrue(solve(new char[][] { //
                { ' ', '7', ' ', ' ', '4', ' ', ' ', '6', ' ' }, // 1x
                { '4', '8', '2', '9', ' ', ' ', '5', '1', '3' }, // 2x
                { ' ', '5', ' ', ' ', ' ', '8', ' ', '4', ' ' }, // 3x
                { ' ', ' ', '7', '1', ' ', ' ', ' ', ' ', ' ' }, // 4x
                { '5', '3', ' ', ' ', '9', ' ', ' ', '2', '6' }, // 5x
                { ' ', ' ', ' ', ' ', ' ', '2', '3', ' ', ' ' }, // 6x
                { ' ', '9', ' ', ' ', ' ', '4', ' ', '8', ' ' }, // 7x
                { '6', '1', '4', '8', ' ', ' ', '7', '3', '2' }, // 8x
                { ' ', '2', ' ', ' ', '3', ' ', ' ', '9', ' ' }, // 9x
        }));
    }

    @Test
    public void p11_3x3() {
        Assert.assertTrue(solve(new char[][] { //
                { '1', '2', '3', '4', '5', '6', '7', '8', '9' }, //
                { '7', '8', '9', '1', '2', '3', '4', '5', '6' }, //
                { '4', '5', '6', '7', '8', '9', '1', '2', '3' }, //
                { '9', '1', '2', '3', '4', '5', '6', '7', '8' }, //
                { '6', '7', '8', '9', '1', '2', '3', '4', '5' }, //
                { '3', '4', '5', '6', '7', '8', '9', '1', '2' }, //
                { '8', '9', '1', '2', '3', '4', '5', '6', '7' }, //
                { '5', '6', '7', '8', '9', '1', '2', '3', '4' }, //
                { '2', '3', '4', '5', '6', '7', '8', '9', '1' }, //
        }));
    }

    @Test
    public void p12_3x3() {
        Assert.assertTrue(solve(new char[][] { //
                { ' ', ' ', '6', ' ', ' ', ' ', '5', ' ', ' ' }, //
                { ' ', '5', '3', '4', ' ', '2', '9', '1', ' ' }, //
                { '1', '2', ' ', ' ', ' ', ' ', ' ', '6', '4' }, //
                { ' ', ' ', ' ', '7', '5', '4', ' ', ' ', ' ' }, //
                { ' ', ' ', ' ', ' ', '8', ' ', ' ', ' ', ' ' }, //
                { ' ', ' ', ' ', '2', '9', '3', ' ', ' ', ' ' }, //
                { '2', '7', ' ', ' ', ' ', ' ', ' ', '8', '3' }, //
                { ' ', '3', '8', '5', ' ', '7', '2', '9', ' ' }, //
                { ' ', ' ', '4', ' ', ' ', ' ', '7', ' ', ' ' }, //
        }));
    }

    @Test
    public void p13_3x3() {
        Assert.assertTrue(solve(new char[][] { //
                { ' ', '3', ' ', '2', '6', ' ', '1', ' ', ' ' }, //
                { ' ', '6', ' ', '8', ' ', ' ', '3', '2', '4' }, //
                { ' ', ' ', ' ', ' ', ' ', '1', ' ', ' ', ' ' }, //
                { ' ', ' ', '1', ' ', '8', ' ', ' ', '9', '2' }, //
                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                { '4', '9', ' ', ' ', '2', ' ', '5', ' ', ' ' }, //
                { ' ', ' ', ' ', '6', ' ', ' ', ' ', ' ', ' ' }, //
                { '8', '5', '9', ' ', ' ', '2', ' ', '6', ' ' }, //
                { ' ', ' ', '7', ' ', '5', '3', ' ', '8', ' ' }, //
        }));
    }

    @Test
    public void p14_3x3() {
        Assert.assertTrue(solve(new char[][] { //
                { '9', '3', ' ', '4', ' ', ' ', ' ', ' ', '7' }, //
                { ' ', ' ', '4', '6', '3', ' ', ' ', ' ', ' ' }, //
                { '6', ' ', ' ', ' ', '1', ' ', ' ', ' ', ' ' }, //
                { ' ', '4', ' ', ' ', '6', ' ', ' ', ' ', ' ' }, //
                { '1', '2', ' ', '9', ' ', '7', ' ', '8', '6' }, //
                { ' ', ' ', ' ', ' ', '2', ' ', ' ', '1', ' ' }, //
                { ' ', ' ', ' ', ' ', '9', ' ', ' ', ' ', '1' }, //
                { ' ', ' ', ' ', ' ', '8', '6', '9', ' ', ' ' }, //
                { '8', ' ', ' ', ' ', ' ', '3', ' ', '2', '4' }, //
        }));
    }

    @Test
    public void p1_4x4() {
        Assert.assertTrue(solve(new char[][] { //
                { ' ', 'a', ' ', '5', '1', '-', 'e', '4', '-', '-', '-', '-', '7', 'd', ' ', '0' }, //
                { '1', ' ', '4', '6', '3', '-', '2', 'b', '-', '-', '-', '-', '8', ' ', ' ', ' ' }, //
                { 'd', '8', ' ', ' ', ' ', '-', '5', ' ', '-', '-', '-', '-', ' ', '1', 'e', '6' }, //
                { '9', ' ', '3', '0', '8', '-', ' ', 'd', '-', '-', '-', '-', 'a', '2', ' ', ' ' }, //
                { '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-' }, //
                { ' ', '1', ' ', '9', '6', '-', '4', '7', 'a', 'f', '-', 'b', '2', ' ', ' ', '8' }, //
                { ' ', '2', ' ', '8', '5', '-', 'c', ' ', ' ', '0', '-', '6', '4', '7', ' ', 'e' }, //
                { '6', ' ', '0', 'c', 'd', '-', ' ', '3', '7', ' ', '-', ' ', ' ', ' ', '9', ' ' }, //
                { ' ', '6', ' ', ' ', ' ', '-', ' ', '9', '8', ' ', '-', '0', '1', '3', ' ', '2' }, //
                { '2', ' ', '7', 'a', '4', '-', '3', ' ', ' ', '9', '-', 'f', '5', ' ', 'b', ' ' }, //
                { '3', ' ', ' ', 'b', 'e', '-', '6', '8', '5', '4', '-', 'a', 'c', ' ', 'f', ' ' }, //
                { '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-' }, //
                { ' ', ' ', '6', 'd', '-', '-', '-', '-', '4', ' ', '-', '8', 'b', 'f', ' ', '7' }, //
                { '8', '7', '9', ' ', '-', '-', '-', '-', ' ', 'c', '-', ' ', ' ', ' ', 'd', '3' }, //
                { ' ', ' ', ' ', '1', '-', '-', '-', '-', '6', 'e', '-', '9', '0', 'c', ' ', 'a' }, //
                { '0', ' ', 'f', '2', '-', '-', '-', '-', '3', 'b', '-', 'd', '9', ' ', '1', ' ' }, //
        }));
    }

    @Test
    public void p1_5x5() {
        Assert.assertTrue(solve(new char[][] { //
                { 'g', 'k', 'b', 'p', 'u', 's', 'e', 'w', 'm', 'h', 'n', 'l', 'o', 'f', 'd', 'a', 'i', 'q', 't', ' ',
                        'c', 'j', 'r', 'v', ' ' }, //
                { 'r', 'd', 'o', 'q', ' ', 'k', 'f', 'b', 'a', 'n', 't', 'u', 'v', 'j', 'h', 'c', 'e', 'l', 's', ' ',
                        'g', 'i', 'm', 'p', ' ' }, //
                { 'n', 'a', 'x', 'f', 'h', 'g', 'c', 'i', 'o', 't', 'e', 'w', 'k', 'p', 'y', 'b', 'j', 'm', 'r', ' ',
                        'd', 'l', 'q', 's', ' ' }, //
                { 'e', 's', 'c', 'j', 't', 'd', 'r', ' ', ' ', ' ', 'x', 'q', 'i', 'a', ' ', 'f', 'g', 'k', 'u', 'w',
                        'b', 'h', 'n', 'o', ' ' }, //
                { ' ', 'm', 'l', 'i', 'v', 'x', 'u', 'q', 'y', 'j', 's', 'r', 'g', ' ', ' ', 'd', 'h', 'n', 'p', 'o',
                        'a', 'e', 'f', ' ', ' ' }, //
                { 'y', 'e', 'v', 't', 'w', 'f', ' ', 'o', 'j', 'd', 'q', 's', 'l', 'm', 'n', 'g', 'a', 'c', 'k', ' ',
                        'r', 'b', 'h', ' ', ' ' }, //
                { 's', 'p', 'k', 'b', 'j', 'h', 'y', 'g', 'c', 'a', 'd', 'x', 't', 'u', 'o', 'e', 'f', 'r', ' ', 'q',
                        'm', 'n', 'v', ' ', ' ' }, //
                { 'd', 'l', 'a', 'u', 'r', 'q', 's', 'v', 'x', 'k', 'b', 'y', 'c', 'g', ' ', 'h', 'm', 'p', 'w', 'n',
                        'j', ' ', ' ', ' ', ' ' }, //
                { 'm', 'c', 'q', ' ', 'o', 'w', 'l', 'n', 'b', 'p', 'f', 'e', 'j', 'r', ' ', 'i', 'd', 'x', 'v', ' ',
                        ' ', 'g', 'k', ' ', ' ' }, //
                { 'x', 'f', 'i', 'n', ' ', 'e', 'm', 'u', 't', ' ', 'k', 'h', 'w', 'v', 'p', 'j', 'b', 'o', ' ', ' ',
                        'l', 'a', 'c', ' ', ' ' }, //
                { 'o', ' ', 'm', ' ', 'i', 'n', 'x', 'f', 'k', 'q', 'r', 'g', 'a', 'w', 'j', 'l', 'c', ' ', 'd', 'b',
                        ' ', 's', ' ', ' ', ' ' }, //
                { 'p', 'h', 's', 'l', ' ', 'j', 'w', 'm', 'd', ' ', 'v', 'i', 'e', 't', 'b', 'k', 'q', ' ', 'g', 'a',
                        'u', 'f', ' ', ' ', ' ' }, //
                { 'j', 'w', 'f', 'g', 'x', 'u', 't', 'y', 'r', ' ', 'p', 'o', 'd', 'c', 'k', 'm', 's', ' ', ' ', ' ',
                        'e', ' ', 'a', ' ', ' ' }, //
                { 'v', 't', 'd', 'a', 'c', 'b', 'p', 's', 'i', 'g', 'h', 'm', 'q', 'x', ' ', 'n', 'r', 'j', 'e', ' ',
                        ' ', 'k', 'l', ' ', ' ' }, //
                { 'u', 'b', 'r', 'k', 'q', 'c', 'a', 'h', 'v', 'e', 'y', 'n', 's', ' ', 'f', 'o', 't', ' ', ' ', ' ',
                        'i', 'd', ' ', ' ', ' ' }, //
                { ' ', 'x', 'j', ' ', ' ', 'o', 'v', 'r', ' ', 'u', 'w', 'b', 'f', 'y', 's', 'p', 'n', ' ', ' ', ' ',
                        'h', 'c', ' ', ' ', ' ' }, //
                { 'a', 'n', 'g', 'w', 'p', 'l', 'd', 'k', 'h', 's', ' ', 'v', 'r', 'q', 't', 'u', 'o', 'e', 'f', 'c',
                        'x', ' ', ' ', ' ', ' ' }, //
                { 'q', ' ', 'u', 'c', 'k', 't', 'j', 'x', 'f', 'b', 'o', ' ', 'n', ' ', ' ', 'r', ' ', ' ', ' ', ' ',
                        'p', ' ', ' ', ' ', ' ' }, //
                { 'i', 'r', ' ', 's', 'f', 'y', 'n', 'a', 'w', 'c', 'm', 'd', 'p', 'e', 'g', 'q', ' ', 'b', 'j', 'k',
                        ' ', ' ', ' ', ' ', ' ' }, //
                { 'b', 'o', 't', 'y', 'e', 'm', 'q', 'p', ' ', ' ', 'j', ' ', 'u', ' ', 'x', ' ', ' ', ' ', 'h', ' ',
                        'f', ' ', ' ', ' ', ' ' }, //
                { 't', 'g', 'w', 'x', 'd', 'i', 'h', 'c', 'q', 'm', 'l', 'f', 'y', 'o', ' ', ' ', ' ', 'a', ' ', 'j',
                        'k', 'p', ' ', ' ', ' ' }, //
                { 'c', 'i', 'n', 'm', ' ', 'v', 'k', 'j', 'l', ' ', 'g', 'p', 'h', ' ', 'r', ' ', ' ', ' ', 'o', 'e',
                        'q', ' ', ' ', ' ', ' ' }, //
                { 'f', 'q', 'p', ' ', 's', 'a', 'g', 'd', 'u', 'w', 'c', 'j', 'm', 'n', 'e', 't', 'k', 'h', 'b', ' ',
                        ' ', 'x', ' ', ' ', ' ' }, //
                { 'h', 'j', 'e', 'r', 'a', 'p', 'b', 't', 's', 'y', 'u', ' ', 'x', 'i', 'w', ' ', ' ', 'd', ' ', ' ',
                        'n', ' ', ' ', ' ', ' ' }, //
                { 'k', 'u', 'y', 'v', 'l', ' ', ' ', ' ', ' ', 'f', 'a', ' ', ' ', 'd', 'q', ' ', 'p', 'g', ' ', ' ',
                        's', 'm', ' ', ' ', ' ' }, //
        }));
    }

    private static boolean solve(final char[][] input) {
        PuzzleModel<?> model;
        if (input.length == 4)
            model = new Puzzle4x4();
        else if (input.length == 9)
            model = new Puzzle9x9();
        else if (input.length == 16)
            model = new Puzzle16x16();
        else if (input.length == 25)
            model = new Puzzle25x25();
        else
            throw new RuntimeException("No puzzle model for input of length " + input.length);

        model.init();

        for (int y = 0; y < input.length; y++) {
            for (int x = 0; x < input[0].length; x++) {
                if (input[y][x] == '-')
                    input[y][x] = ' ';
                if (input[y][x] != ' ')
                    model.setValue(x, y, input[y][x]);
            }
        }

        SolverFactory.solve(model);

        new HorizontalValidator().validate(model);
        new VerticalValidator().validate(model);
        new BoxValidator().validate(model);

        //        model.dump();

        return model.isSolved();
    }
}
