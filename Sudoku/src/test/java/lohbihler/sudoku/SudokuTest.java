package lohbihler.sudoku;

import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.List;

import org.junit.Assert;
import org.junit.Test;

public class SudokuTest {
    @Test
    public void idiotic() {
        final Puzzle4x4 model = test(new Puzzle4x4(),
                new char[][] { //
                        { '1', ' ', ' ', ' ' }, //
                        { ' ', '2', '1', '4' }, //
                        { ' ', ' ', '2', ' ' }, //
                        { ' ', ' ', ' ', '1' }, //
                });

        assertEquals(model,
                new char[][] { //
                        { '1', '4', '3', '2' }, //
                        { '3', '2', '1', '4' }, //
                        { '4', '1', '2', '3' }, //
                        { '2', '3', '4', '1' }, //
                });
    }

    @Test
    public void tough1() {
        final Puzzle9x9 model = test(new Puzzle9x9(),
                new char[][] { //
                        { ' ', ' ', '7', ' ', ' ', '6', ' ', ' ', '8' }, //
                        { ' ', ' ', ' ', '8', ' ', ' ', ' ', '2', '4' }, //
                        { ' ', ' ', ' ', ' ', '1', ' ', ' ', '6', '3' }, //
                        { ' ', ' ', ' ', ' ', '2', '5', '4', ' ', '9' }, //
                        { ' ', '5', ' ', ' ', ' ', ' ', ' ', '1', ' ' }, //
                        { '7', ' ', '4', '1', '9', ' ', ' ', ' ', ' ' }, //
                        { '8', '2', ' ', ' ', '7', ' ', ' ', ' ', ' ' }, //
                        { '4', '7', ' ', ' ', ' ', '8', ' ', ' ', ' ' }, //
                        { '6', ' ', ' ', '4', ' ', ' ', '2', ' ', ' ' }, //
                });

        assertEquals(model,
                new char[][] { //
                        { '2', '3', '7', '5', '4', '6', '1', '9', '8' }, //
                        { '1', '9', '6', '8', '3', '7', '5', '2', '4' }, //
                        { '5', '4', '8', '9', '1', '2', '7', '6', '3' }, //
                        { '3', '8', '1', '6', '2', '5', '4', '7', '9' }, //
                        { '9', '5', '2', '7', '8', '4', '3', '1', '6' }, //
                        { '7', '6', '4', '1', '9', '3', '8', '5', '2' }, //
                        { '8', '2', '9', '3', '7', '1', '6', '4', '5' }, //
                        { '4', '7', '5', '2', '6', '8', '9', '3', '1' }, //
                        { '6', '1', '3', '4', '5', '9', '2', '8', '7' }, //
                });
    }

    @Test
    public void tough2() {
        final Puzzle9x9 model = test(new Puzzle9x9(),
                new char[][] { //
                        { ' ', ' ', ' ', '3', ' ', ' ', '1', ' ', ' ' }, //
                        { ' ', '4', ' ', ' ', ' ', '9', '6', ' ', '5' }, //
                        { '3', ' ', ' ', '5', ' ', '7', ' ', '2', ' ' }, //
                        { '2', ' ', '6', '7', '9', ' ', ' ', ' ', ' ' }, //
                        { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                        { ' ', ' ', ' ', ' ', '3', '1', '5', ' ', '6' }, //
                        { ' ', '1', ' ', '6', ' ', '8', ' ', ' ', '4' }, //
                        { '6', ' ', '3', '4', ' ', ' ', ' ', '8', ' ' }, //
                        { ' ', ' ', '8', ' ', ' ', '3', ' ', ' ', ' ' }, //
                });

        assertEquals(model,
                new char[][] { //
                        { '5', '2', '9', '3', '8', '6', '1', '4', '7' }, //
                        { '8', '4', '7', '1', '2', '9', '6', '3', '5' }, //
                        { '3', '6', '1', '5', '4', '7', '8', '2', '9' }, //
                        { '2', '3', '6', '7', '9', '5', '4', '1', '8' }, //
                        { '1', '9', '5', '8', '6', '4', '2', '7', '3' }, //
                        { '7', '8', '4', '2', '3', '1', '5', '9', '6' }, //
                        { '9', '1', '2', '6', '7', '8', '3', '5', '4' }, //
                        { '6', '7', '3', '4', '5', '2', '9', '8', '1' }, //
                        { '4', '5', '8', '9', '1', '3', '7', '6', '2' }, //
                });
    }

    @Test
    public void tough3() {
        final Puzzle9x9 model = test(new Puzzle9x9(),
                new char[][] { //
                        { '9', ' ', ' ', '5', ' ', ' ', ' ', ' ', ' ' }, //
                        { '2', '5', '3', ' ', ' ', ' ', ' ', '1', ' ' }, //
                        { ' ', ' ', '1', '2', ' ', ' ', ' ', ' ', ' ' }, //
                        { ' ', '6', ' ', ' ', '3', '2', ' ', ' ', '5' }, //
                        { '1', ' ', ' ', '6', ' ', '8', ' ', ' ', '9' }, //
                        { '3', ' ', ' ', '4', '9', ' ', ' ', '7', ' ' }, //
                        { ' ', ' ', ' ', ' ', ' ', '4', '6', ' ', ' ' }, //
                        { ' ', '9', ' ', ' ', ' ', ' ', '7', '4', '1' }, //
                        { ' ', ' ', ' ', ' ', ' ', '9', ' ', ' ', '3' }, //
                });

        assertEquals(model,
                new char[][] { //
                        { '9', '4', '8', '5', '1', '7', '3', '6', '2', }, //
                        { '2', '5', '3', '9', '4', '6', '8', '1', '7', }, //
                        { '6', '7', '1', '2', '8', '3', '9', '5', '4', }, //
                        { '4', '6', '9', '7', '3', '2', '1', '8', '5', }, //
                        { '1', '2', '7', '6', '5', '8', '4', '3', '9', }, //
                        { '3', '8', '5', '4', '9', '1', '2', '7', '6', }, //
                        { '5', '3', '2', '1', '7', '4', '6', '9', '8', }, //
                        { '8', '9', '6', '3', '2', '5', '7', '4', '1', }, //
                        { '7', '1', '4', '8', '6', '9', '5', '2', '3', }, //
                });
    }

    @Test
    public void tough4() {
        final Puzzle9x9 model = test(new Puzzle9x9(),
                new char[][] { //
                        { ' ', '2', ' ', ' ', ' ', ' ', ' ', '3', ' ' }, //
                        { ' ', '8', ' ', ' ', ' ', ' ', ' ', ' ', '9' }, //
                        { ' ', ' ', '4', '2', '3', ' ', ' ', ' ', '1' }, //
                        { '4', ' ', '5', ' ', '8', '1', '9', ' ', ' ' }, //
                        { '2', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '8' }, //
                        { ' ', ' ', '8', '6', '9', ' ', '4', ' ', '3' }, //
                        { '8', ' ', ' ', ' ', '5', '9', '1', ' ', ' ' }, //
                        { '1', ' ', ' ', ' ', ' ', ' ', ' ', '9', ' ' }, //
                        { ' ', '9', ' ', ' ', ' ', ' ', ' ', '6', ' ' }, //
                });

        assertEquals(model,
                new char[][] { //
                        { '6', '2', '7', '9', '1', '8', '5', '3', '4', }, //
                        { '3', '8', '1', '4', '6', '5', '2', '7', '9', }, //
                        { '9', '5', '4', '2', '3', '7', '6', '8', '1', }, //
                        { '4', '3', '5', '7', '8', '1', '9', '2', '6', }, //
                        { '2', '6', '9', '5', '4', '3', '7', '1', '8', }, //
                        { '7', '1', '8', '6', '9', '2', '4', '5', '3', }, //
                        { '8', '7', '6', '3', '5', '9', '1', '4', '2', }, //
                        { '1', '4', '2', '8', '7', '6', '3', '9', '5', }, //
                        { '5', '9', '3', '1', '2', '4', '8', '6', '7', }, //
                });
    }

    @Test
    public void tough5() {
        final Puzzle9x9 model = test(new Puzzle9x9(),
                new char[][] { //
                        { ' ', ' ', '5', '6', ' ', '4', ' ', ' ', ' ' }, //
                        { ' ', ' ', '7', ' ', ' ', '3', '4', '9', ' ' }, //
                        { ' ', ' ', '3', ' ', ' ', '9', ' ', ' ', '7' }, //
                        { ' ', ' ', ' ', ' ', ' ', '6', ' ', '8', ' ' }, //
                        { ' ', '9', '4', ' ', ' ', ' ', '5', '2', ' ' }, //
                        { ' ', '8', ' ', '4', ' ', ' ', ' ', ' ', ' ' }, //
                        { '1', ' ', ' ', '5', ' ', ' ', '3', ' ', ' ' }, //
                        { ' ', '4', '9', '3', ' ', ' ', '8', ' ', ' ' }, //
                        { ' ', ' ', ' ', '9', ' ', '2', '1', ' ', ' ' }, //
                });

        assertEquals(model,
                new char[][] { //
                        { '9', '1', '5', '6', '7', '4', '2', '3', '8', }, //
                        { '8', '6', '7', '2', '5', '3', '4', '9', '1', }, //
                        { '4', '2', '3', '1', '8', '9', '6', '5', '7', }, //
                        { '3', '5', '1', '7', '2', '6', '9', '8', '4', }, //
                        { '7', '9', '4', '8', '3', '1', '5', '2', '6', }, //
                        { '2', '8', '6', '4', '9', '5', '7', '1', '3', }, //
                        { '1', '7', '2', '5', '6', '8', '3', '4', '9', }, //
                        { '5', '4', '9', '3', '1', '7', '8', '6', '2', }, //
                        { '6', '3', '8', '9', '4', '2', '1', '7', '5', }, //
                });
    }

    @Test
    public void moderate1() {
        final Puzzle9x9 model = test(new Puzzle9x9(),
                new char[][] { //
                        { ' ', ' ', '9', ' ', '8', ' ', ' ', ' ', '1' }, //
                        { ' ', '8', ' ', ' ', '7', ' ', ' ', ' ', ' ' }, //
                        { ' ', '6', ' ', '4', '2', '1', ' ', ' ', '5' }, //
                        { ' ', ' ', '2', ' ', ' ', ' ', '1', ' ', '8' }, //
                        { '8', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '4' }, //
                        { '3', ' ', '5', ' ', ' ', ' ', '6', ' ', ' ' }, //
                        { '4', ' ', ' ', '6', '1', '2', ' ', '5', ' ' }, //
                        { ' ', ' ', ' ', ' ', '5', ' ', ' ', '4', ' ' }, //
                        { '5', ' ', ' ', ' ', '4', ' ', '8', ' ', ' ' }, //
                });

        assertEquals(model,
                new char[][] { //
                        { '2', '5', '9', '3', '8', '6', '4', '7', '1', }, //
                        { '1', '8', '4', '9', '7', '5', '3', '6', '2', }, //
                        { '7', '6', '3', '4', '2', '1', '9', '8', '5', }, //
                        { '6', '7', '2', '5', '3', '4', '1', '9', '8', }, //
                        { '8', '9', '1', '2', '6', '7', '5', '3', '4', }, //
                        { '3', '4', '5', '1', '9', '8', '6', '2', '7', }, //
                        { '4', '3', '8', '6', '1', '2', '7', '5', '9', }, //
                        { '9', '1', '7', '8', '5', '3', '2', '4', '6', }, //
                        { '5', '2', '6', '7', '4', '9', '8', '1', '3', }, //
                });
    }

    @Test
    public void moderate2() {
        final Puzzle9x9 model = test(new Puzzle9x9(),
                new char[][] { //
                        { ' ', ' ', '9', '3', ' ', ' ', ' ', '7', ' ' }, //
                        { ' ', ' ', '2', '4', ' ', ' ', '9', ' ', '3' }, //
                        { ' ', '8', '7', ' ', ' ', '6', ' ', ' ', ' ' }, //
                        { ' ', '2', '3', ' ', '5', ' ', ' ', ' ', ' ' }, //
                        { ' ', ' ', ' ', '7', ' ', '2', ' ', ' ', ' ' }, //
                        { ' ', ' ', ' ', ' ', '3', ' ', '1', '4', ' ' }, //
                        { ' ', ' ', ' ', '1', ' ', ' ', '3', '5', ' ' }, //
                        { '9', ' ', '1', ' ', ' ', '3', '7', ' ', ' ' }, //
                        { ' ', '3', ' ', ' ', ' ', '7', '2', ' ', ' ' }, //
                });

        assertEquals(model,
                new char[][] { //
                        { '5', '4', '9', '3', '2', '8', '6', '7', '1', }, //
                        { '6', '1', '2', '4', '7', '5', '9', '8', '3', }, //
                        { '3', '8', '7', '9', '1', '6', '4', '2', '5', }, //
                        { '4', '2', '3', '6', '5', '1', '8', '9', '7', }, //
                        { '1', '9', '8', '7', '4', '2', '5', '3', '6', }, //
                        { '7', '6', '5', '8', '3', '9', '1', '4', '2', }, //
                        { '2', '7', '6', '1', '9', '4', '3', '5', '8', }, //
                        { '9', '5', '1', '2', '8', '3', '7', '6', '4', }, //
                        { '8', '3', '4', '5', '6', '7', '2', '1', '9', }, //
                });
    }

    @Test
    public void custom1() {
        final Puzzle9x9 model = test(new Puzzle9x9(),
                new char[][] { //
                        { ' ', ' ', ' ', '3', '6', '7', '1', ' ', ' ' }, // 1x6
                        { ' ', '1', ' ', ' ', '5', ' ', ' ', '9', ' ' }, // 2x3
                        { '3', ' ', '5', ' ', '1', ' ', '6', ' ', '2' }, // 3x5
                        { '4', ' ', ' ', ' ', ' ', '9', ' ', '5', ' ' }, // 4x1
                        { ' ', ' ', '1', ' ', ' ', ' ', '7', ' ', ' ' }, // 5x5
                        { '9', ' ', ' ', '1', ' ', '3', ' ', ' ', '6' }, // 6x4
                        { '5', ' ', '6', ' ', '2', ' ', ' ', ' ', '3' }, // 7x3
                        { ' ', '9', ' ', ' ', '3', ' ', ' ', '1', ' ' }, // 8x0
                        { ' ', ' ', ' ', '7', '9', '5', ' ', ' ', '8' }, // 9x5
                });

        assertEquals(model,
                new char[][] { //
                        { '2', '4', '9', '3', '6', '7', '1', '8', '5', }, //
                        { '6', '1', '8', '2', '5', '4', '3', '9', '7', }, //
                        { '3', '7', '5', '9', '1', '8', '6', '4', '2', }, //
                        { '4', '2', '3', '6', '7', '9', '8', '5', '1', }, //
                        { '8', '6', '1', '5', '4', '2', '7', '3', '9', }, //
                        { '9', '5', '7', '1', '8', '3', '4', '2', '6', }, //
                        { '5', '8', '6', '4', '2', '1', '9', '7', '3', }, //
                        { '7', '9', '2', '8', '3', '6', '5', '1', '4', }, //
                        { '1', '3', '4', '7', '9', '5', '2', '6', '8', }, //
                });
    }

    @Test
    public void custom2() {
        try {
            test(new Puzzle9x9(),
                    new char[][] { //
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                            { ' ', ' ', ' ', '?', ' ', ' ', ' ', ' ', ' ' }, //
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                            { ' ', ' ', ' ', ' ', ' ', ' ', '?', ' ', ' ' }, //
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                            { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                    });
            fail("Should have throws RTE");
        } catch (final RuntimeException e) {
            Assert.assertEquals(
                    "Attempt to set cell to a value that has already been eliminated: cell:[1, 2, 3, 4, 5, 6, 7, 8, 9], value=?",
                    e.getMessage());
        }
    }

    @Test
    public void custom3() {
        final Puzzle9x9 model = test(new Puzzle9x9(),
                new char[][] { //
                        { ' ', '7', ' ', ' ', '4', ' ', ' ', '6', ' ' }, // 1x
                        { '4', '8', '2', '9', ' ', ' ', '5', '1', '3' }, // 2x
                        { ' ', '5', ' ', ' ', ' ', '8', ' ', '4', ' ' }, // 3x
                        { ' ', ' ', '7', '1', ' ', ' ', ' ', ' ', ' ' }, // 4x
                        { '5', '3', ' ', ' ', '9', ' ', ' ', '2', '6' }, // 5x
                        { ' ', ' ', ' ', ' ', ' ', '2', '3', ' ', ' ' }, // 6x
                        { ' ', '9', ' ', ' ', ' ', '4', ' ', '8', ' ' }, // 7x
                        { '6', '1', '4', '8', ' ', ' ', '7', '3', '2' }, // 8x
                        { ' ', '2', ' ', ' ', '3', ' ', ' ', '9', ' ' }, // 9x
                });

        assertEquals(model,
                new char[][] { //
                        { '1', '7', '9', '3', '4', '5', '2', '6', '8', }, //
                        { '4', '8', '2', '9', '7', '6', '5', '1', '3', }, //
                        { '3', '5', '6', '2', '1', '8', '9', '4', '7', }, //
                        { '2', '6', '7', '1', '8', '3', '4', '5', '9', }, //
                        { '5', '3', '1', '4', '9', '7', '8', '2', '6', }, //
                        { '9', '4', '8', '5', '6', '2', '3', '7', '1', }, //
                        { '7', '9', '3', '6', '2', '4', '1', '8', '5', }, //
                        { '6', '1', '4', '8', '5', '9', '7', '3', '2', }, //
                        { '8', '2', '5', '7', '3', '1', '6', '9', '4', }, //
                });
    }

    @Test
    public void custom4() {
        final Puzzle9x9 model = test(new Puzzle9x9(),
                new char[][] { //
                        { '1', '2', '3', '4', '5', '6', '7', '8', '9' }, //
                        { '7', '8', '9', '1', '2', '3', '4', '5', '6' }, //
                        { '4', '5', '6', '7', '8', '9', '1', '2', '3' }, //
                        { '9', '1', '2', '3', '4', '5', '6', '7', '8' }, //
                        { '6', '7', '8', '9', '1', '2', '3', '4', '5' }, //
                        { '3', '4', '5', '6', '7', '8', '9', '1', '2' }, //
                        { '8', '9', '1', '2', '3', '4', '5', '6', '7' }, //
                        { '5', '6', '7', '8', '9', '1', '2', '3', '4' }, //
                        { '2', '3', '4', '5', '6', '7', '8', '9', '1' }, //
                });

        assertEquals(model,
                new char[][] { //
                        { '1', '2', '3', '4', '5', '6', '7', '8', '9' }, //
                        { '7', '8', '9', '1', '2', '3', '4', '5', '6' }, //
                        { '4', '5', '6', '7', '8', '9', '1', '2', '3' }, //
                        { '9', '1', '2', '3', '4', '5', '6', '7', '8' }, //
                        { '6', '7', '8', '9', '1', '2', '3', '4', '5' }, //
                        { '3', '4', '5', '6', '7', '8', '9', '1', '2' }, //
                        { '8', '9', '1', '2', '3', '4', '5', '6', '7' }, //
                        { '5', '6', '7', '8', '9', '1', '2', '3', '4' }, //
                        { '2', '3', '4', '5', '6', '7', '8', '9', '1' }, //
                });
    }

    @Test
    public void gentle1() {
        final Puzzle9x9 model = test(new Puzzle9x9(),
                new char[][] { //
                        { ' ', ' ', '6', ' ', ' ', ' ', '5', ' ', ' ' }, //
                        { ' ', '5', '3', '4', ' ', '2', '9', '1', ' ' }, //
                        { '1', '2', ' ', ' ', ' ', ' ', ' ', '6', '4' }, //
                        { ' ', ' ', ' ', '7', '5', '4', ' ', ' ', ' ' }, //
                        { ' ', ' ', ' ', ' ', '8', ' ', ' ', ' ', ' ' }, //
                        { ' ', ' ', ' ', '2', '9', '3', ' ', ' ', ' ' }, //
                        { '2', '7', ' ', ' ', ' ', ' ', ' ', '8', '3' }, //
                        { ' ', '3', '8', '5', ' ', '7', '2', '9', ' ' }, //
                        { ' ', ' ', '4', ' ', ' ', ' ', '7', ' ', ' ' }, //
                });

        assertEquals(model,
                new char[][] { //
                        { '4', '9', '6', '8', '7', '1', '5', '3', '2', }, //
                        { '8', '5', '3', '4', '6', '2', '9', '1', '7', }, //
                        { '1', '2', '7', '9', '3', '5', '8', '6', '4', }, //
                        { '3', '6', '9', '7', '5', '4', '1', '2', '8', }, //
                        { '5', '4', '2', '1', '8', '6', '3', '7', '9', }, //
                        { '7', '8', '1', '2', '9', '3', '6', '4', '5', }, //
                        { '2', '7', '5', '6', '1', '9', '4', '8', '3', }, //
                        { '6', '3', '8', '5', '4', '7', '2', '9', '1', }, //
                        { '9', '1', '4', '3', '2', '8', '7', '5', '6', }, //
                });
    }

    @Test
    public void diabolical1() {
        final Puzzle9x9 model = test(new Puzzle9x9(),
                new char[][] { //
                        { ' ', '3', ' ', '2', '6', ' ', '1', ' ', ' ' }, //
                        { ' ', '6', ' ', '8', ' ', ' ', '3', '2', '4' }, //
                        { ' ', ' ', ' ', ' ', ' ', '1', ' ', ' ', ' ' }, //
                        { ' ', ' ', '1', ' ', '8', ' ', ' ', '9', '2' }, //
                        { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                        { '4', '9', ' ', ' ', '2', ' ', '5', ' ', ' ' }, //
                        { ' ', ' ', ' ', '6', ' ', ' ', ' ', ' ', ' ' }, //
                        { '8', '5', '9', ' ', ' ', '2', ' ', '6', ' ' }, //
                        { ' ', ' ', '7', ' ', '5', '3', ' ', '8', ' ' }, //
                });

        assertEquals(model,
                new char[][] { //
                        { '9', '3', '4', '2', '6', '5', '1', '7', '8', }, //
                        { '1', '6', '5', '8', '7', '9', '3', '2', '4', }, //
                        { '7', '8', '2', '3', '4', '1', '9', '5', '6', }, //
                        { '3', '7', '1', '5', '8', '4', '6', '9', '2', }, //
                        { '5', '2', '6', '9', '3', '7', '8', '4', '1', }, //
                        { '4', '9', '8', '1', '2', '6', '5', '3', '7', }, //
                        { '2', '4', '3', '6', '9', '8', '7', '1', '5', }, //
                        { '8', '5', '9', '7', '1', '2', '4', '6', '3', }, //
                        { '6', '1', '7', '4', '5', '3', '2', '8', '9', }, //
                });
    }

    @Test
    public void diabolical2() {
        final Puzzle9x9 model = test(new Puzzle9x9(),
                new char[][] { //
                        { '9', '3', ' ', '4', ' ', ' ', ' ', ' ', '7' }, //
                        { ' ', ' ', '4', '6', '3', ' ', ' ', ' ', ' ' }, //
                        { '6', ' ', ' ', ' ', '1', ' ', ' ', ' ', ' ' }, //
                        { ' ', '4', ' ', ' ', '6', ' ', ' ', ' ', ' ' }, //
                        { '1', '2', ' ', '9', ' ', '7', ' ', '8', '6' }, //
                        { ' ', ' ', ' ', ' ', '2', ' ', ' ', '1', ' ' }, //
                        { ' ', ' ', ' ', ' ', '9', ' ', ' ', ' ', '1' }, //
                        { ' ', ' ', ' ', ' ', '8', '6', '9', ' ', ' ' }, //
                        { '8', ' ', ' ', ' ', ' ', '3', ' ', '2', '4' }, //
                });

        assertEquals(model,
                new char[][] { //
                        { '9', '3', '1', '4', '5', '8', '2', '6', '7', }, //
                        { '2', '7', '4', '6', '3', '9', '1', '5', '8', }, //
                        { '6', '8', '5', '7', '1', '2', '3', '4', '9', }, //
                        { '5', '4', '8', '3', '6', '1', '7', '9', '2', }, //
                        { '1', '2', '3', '9', '4', '7', '5', '8', '6', }, //
                        { '7', '9', '6', '8', '2', '5', '4', '1', '3', }, //
                        { '3', '6', '2', '5', '9', '4', '8', '7', '1', }, //
                        { '4', '1', '7', '2', '8', '6', '9', '3', '5', }, //
                        { '8', '5', '9', '1', '7', '3', '6', '2', '4', }, //
                });
    }

    @Test
    public void super1() {
        final Puzzle16x16 model = test(new Puzzle16x16(),
                new char[][] { //
                        { ' ', 'a', ' ', '5', '1', '-', 'e', '4', '-', '-', '-', '-', '7', 'd', ' ', '0' }, //
                        { '1', ' ', '4', '6', '3', '-', '2', 'b', '-', '-', '-', '-', '8', ' ', ' ', ' ' }, //
                        { 'd', '8', ' ', ' ', ' ', '-', '5', ' ', '-', '-', '-', '-', ' ', '1', 'e', '6' }, //
                        { '9', ' ', '3', '0', '8', '-', ' ', 'd', '-', '-', '-', '-', 'a', '2', ' ', ' ' }, //
                        { '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-' }, //
                        { ' ', '1', ' ', '9', '6', '-', '4', '7', 'a', 'f', '-', 'b', '2', ' ', ' ', '8' }, //
                        { ' ', '2', ' ', '8', '5', '-', 'c', ' ', ' ', '0', '-', '6', '4', '7', ' ', 'e' }, //
                        { '6', ' ', '0', 'c', 'd', '-', ' ', '3', '7', ' ', '-', ' ', ' ', ' ', '9', ' ' }, //
                        { ' ', '6', ' ', ' ', ' ', '-', ' ', '9', '8', ' ', '-', '0', '1', '3', ' ', '2' }, //
                        { '2', ' ', '7', 'a', '4', '-', '3', ' ', ' ', '9', '-', 'f', '5', ' ', 'b', ' ' }, //
                        { '3', ' ', ' ', 'b', 'e', '-', '6', '8', '5', '4', '-', 'a', 'c', ' ', 'f', ' ' }, //
                        { '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-' }, //
                        { ' ', ' ', '6', 'd', '-', '-', '-', '-', '4', ' ', '-', '8', 'b', 'f', ' ', '7' }, //
                        { '8', '7', '9', ' ', '-', '-', '-', '-', ' ', 'c', '-', ' ', ' ', ' ', 'd', '3' }, //
                        { ' ', ' ', ' ', '1', '-', '-', '-', '-', '6', 'e', '-', '9', '0', 'c', ' ', 'a' }, //
                        { '0', ' ', 'f', '2', '-', '-', '-', '-', '3', 'b', '-', 'd', '9', ' ', '1', ' ' }, //
                });

        assertEquals(model,
                new char[][] { //
                        { 'b', 'a', '2', '5', '1', '6', 'e', '4', 'f', '8', '9', '3', '7', 'd', 'c', '0', }, //
                        { '1', 'e', '4', '6', '3', 'a', '2', 'b', '0', '7', 'd', 'c', '8', '9', '5', 'f', }, //
                        { 'd', '8', 'c', '7', '9', 'f', '5', '0', 'b', 'a', '4', '2', '3', '1', 'e', '6', }, //
                        { '9', 'f', '3', '0', '8', 'c', '7', 'd', '1', '6', '5', 'e', 'a', '2', '4', 'b', }, //
                        { '7', '4', 'a', '3', 'f', '2', 'b', 'e', '9', '5', '8', '1', 'd', '6', '0', 'c', }, //
                        { 'e', '1', 'd', '9', '6', '0', '4', '7', 'a', 'f', 'c', 'b', '2', '5', '3', '8', }, //
                        { 'f', '2', 'b', '8', '5', '9', 'c', '1', 'd', '0', '3', '6', '4', '7', 'a', 'e', }, //
                        { '6', '5', '0', 'c', 'd', '8', 'a', '3', '7', '2', 'e', '4', 'f', 'b', '9', '1', }, //
                        { 'c', '6', 'e', '4', 'a', '5', 'f', '9', '8', 'd', 'b', '0', '1', '3', '7', '2', }, //
                        { '2', '0', '7', 'a', '4', '1', '3', 'c', 'e', '9', '6', 'f', '5', '8', 'b', 'd', }, //
                        { '3', 'd', '1', 'b', 'e', '7', '6', '8', '5', '4', '2', 'a', 'c', '0', 'f', '9', }, //
                        { '5', '9', '8', 'f', 'b', 'd', '0', '2', 'c', '3', '1', '7', 'e', 'a', '6', '4', }, //
                        { 'a', '3', '6', 'd', 'c', 'e', '9', '5', '4', '1', '0', '8', 'b', 'f', '2', '7', }, //
                        { '8', '7', '9', 'e', '0', 'b', '1', 'a', '2', 'c', 'f', '5', '6', '4', 'd', '3', }, //
                        { '4', 'b', '5', '1', '2', '3', 'd', 'f', '6', 'e', '7', '9', '0', 'c', '8', 'a', }, //
                        { '0', 'c', 'f', '2', '7', '4', '8', '6', '3', 'b', 'a', 'd', '9', 'e', '1', '5', }, //
                });
    }

    @Test
    public void extreme() {
        final Puzzle25x25 model = test(new Puzzle25x25(),
                new char[][] { //
                        { 'g', 'k', 'b', 'p', 'u', 's', 'e', 'w', 'm', 'h', 'n', 'l', 'o', 'f', 'd', 'a', 'i', 'q', 't',
                                ' ', 'c', 'j', 'r', 'v', ' ' }, //
                        { 'r', 'd', 'o', 'q', ' ', 'k', 'f', 'b', 'a', 'n', 't', 'u', 'v', 'j', 'h', 'c', 'e', 'l', 's',
                                ' ', 'g', 'i', 'm', 'p', ' ' }, //
                        { 'n', 'a', 'x', 'f', 'h', 'g', 'c', 'i', 'o', 't', 'e', 'w', 'k', 'p', 'y', 'b', 'j', 'm', 'r',
                                ' ', 'd', 'l', 'q', 's', ' ' }, //
                        { 'e', 's', 'c', 'j', 't', 'd', 'r', ' ', ' ', ' ', 'x', 'q', 'i', 'a', ' ', 'f', 'g', 'k', 'u',
                                'w', 'b', 'h', 'n', 'o', ' ' }, //
                        { ' ', 'm', 'l', 'i', 'v', 'x', 'u', 'q', 'y', 'j', 's', 'r', 'g', ' ', ' ', 'd', 'h', 'n', 'p',
                                'o', 'a', 'e', 'f', ' ', ' ' }, //
                        { 'y', 'e', 'v', 't', 'w', 'f', ' ', 'o', 'j', 'd', 'q', 's', 'l', 'm', 'n', 'g', 'a', 'c', 'k',
                                ' ', 'r', 'b', 'h', ' ', ' ' }, //
                        { 's', 'p', 'k', 'b', 'j', 'h', 'y', 'g', 'c', 'a', 'd', 'x', 't', 'u', 'o', 'e', 'f', 'r', ' ',
                                'q', 'm', 'n', 'v', ' ', ' ' }, //
                        { 'd', 'l', 'a', 'u', 'r', 'q', 's', 'v', 'x', 'k', 'b', 'y', 'c', 'g', ' ', 'h', 'm', 'p', 'w',
                                'n', 'j', ' ', ' ', ' ', ' ' }, //
                        { 'm', 'c', 'q', ' ', 'o', 'w', 'l', 'n', 'b', 'p', 'f', 'e', 'j', 'r', ' ', 'i', 'd', 'x', 'v',
                                ' ', ' ', 'g', 'k', ' ', ' ' }, //
                        { 'x', 'f', 'i', 'n', ' ', 'e', 'm', 'u', 't', ' ', 'k', 'h', 'w', 'v', 'p', 'j', 'b', 'o', ' ',
                                ' ', 'l', 'a', 'c', ' ', ' ' }, //
                        { 'o', ' ', 'm', ' ', 'i', 'n', 'x', 'f', 'k', 'q', 'r', 'g', 'a', 'w', 'j', 'l', 'c', ' ', 'd',
                                'b', ' ', 's', ' ', ' ', ' ' }, //
                        { 'p', 'h', 's', 'l', ' ', 'j', 'w', 'm', 'd', ' ', 'v', 'i', 'e', 't', 'b', 'k', 'q', ' ', 'g',
                                'a', 'u', 'f', ' ', ' ', ' ' }, //
                        { 'j', 'w', 'f', 'g', 'x', 'u', 't', 'y', 'r', ' ', 'p', 'o', 'd', 'c', 'k', 'm', 's', ' ', ' ',
                                ' ', 'e', ' ', 'a', ' ', ' ' }, //
                        { 'v', 't', 'd', 'a', 'c', 'b', 'p', 's', 'i', 'g', 'h', 'm', 'q', 'x', ' ', 'n', 'r', 'j', 'e',
                                ' ', ' ', 'k', 'l', ' ', ' ' }, //
                        { 'u', 'b', 'r', 'k', 'q', 'c', 'a', 'h', 'v', 'e', 'y', 'n', 's', ' ', 'f', 'o', 't', ' ', ' ',
                                ' ', 'i', 'd', ' ', ' ', ' ' }, //
                        { ' ', 'x', 'j', ' ', ' ', 'o', 'v', 'r', ' ', 'u', 'w', 'b', 'f', 'y', 's', 'p', 'n', ' ', ' ',
                                ' ', 'h', 'c', ' ', ' ', ' ' }, //
                        { 'a', 'n', 'g', 'w', 'p', 'l', 'd', 'k', 'h', 's', ' ', 'v', 'r', 'q', 't', 'u', 'o', 'e', 'f',
                                'c', 'x', ' ', ' ', ' ', ' ' }, //
                        { 'q', ' ', 'u', 'c', 'k', 't', 'j', 'x', 'f', 'b', 'o', ' ', 'n', ' ', ' ', 'r', ' ', ' ', ' ',
                                ' ', 'p', ' ', ' ', ' ', ' ' }, //
                        { 'i', 'r', ' ', 's', 'f', 'y', 'n', 'a', 'w', 'c', 'm', 'd', 'p', 'e', 'g', 'q', ' ', 'b', 'j',
                                'k', ' ', ' ', ' ', ' ', ' ' }, //
                        { 'b', 'o', 't', 'y', 'e', 'm', 'q', 'p', ' ', ' ', 'j', ' ', 'u', ' ', 'x', ' ', ' ', ' ', 'h',
                                ' ', 'f', ' ', ' ', ' ', ' ' }, //
                        { 't', 'g', 'w', 'x', 'd', 'i', 'h', 'c', 'q', 'm', 'l', 'f', 'y', 'o', ' ', ' ', ' ', 'a', ' ',
                                'j', 'k', 'p', ' ', ' ', ' ' }, //
                        { 'c', 'i', 'n', 'm', ' ', 'v', 'k', 'j', 'l', ' ', 'g', 'p', 'h', ' ', 'r', ' ', ' ', ' ', 'o',
                                'e', 'q', ' ', ' ', ' ', ' ' }, //
                        { 'f', 'q', 'p', ' ', 's', 'a', 'g', 'd', 'u', 'w', 'c', 'j', 'm', 'n', 'e', 't', 'k', 'h', 'b',
                                ' ', ' ', 'x', ' ', ' ', ' ' }, //
                        { 'h', 'j', 'e', 'r', 'a', 'p', 'b', 't', 's', 'y', 'u', ' ', 'x', 'i', 'w', ' ', ' ', 'd', ' ',
                                ' ', 'n', ' ', ' ', ' ', ' ' }, //
                        { 'k', 'u', 'y', 'v', 'l', ' ', ' ', ' ', ' ', 'f', 'a', ' ', ' ', 'd', 'q', ' ', 'p', 'g', ' ',
                                ' ', 's', 'm', ' ', ' ', ' ' }, //
                });

        assertEquals(model,
                new char[][] { //
                        { 'g', 'k', 'b', 'p', 'u', 's', 'e', 'w', 'm', 'h', 'n', 'l', 'o', 'f', 'd', 'a', 'i', 'q', 't',
                                'y', 'c', 'j', 'r', 'v', 'x', }, //
                        { 'r', 'd', 'o', 'q', 'y', 'k', 'f', 'b', 'a', 'n', 't', 'u', 'v', 'j', 'h', 'c', 'e', 'l', 's',
                                'x', 'g', 'i', 'm', 'p', 'w', }, //
                        { 'n', 'a', 'x', 'f', 'h', 'g', 'c', 'i', 'o', 't', 'e', 'w', 'k', 'p', 'y', 'b', 'j', 'm', 'r',
                                'v', 'd', 'l', 'q', 's', 'u', }, //
                        { 'e', 's', 'c', 'j', 't', 'd', 'r', 'l', 'p', 'v', 'x', 'q', 'i', 'a', 'm', 'f', 'g', 'k', 'u',
                                'w', 'b', 'h', 'n', 'o', 'y', }, //
                        { 'w', 'm', 'l', 'i', 'v', 'x', 'u', 'q', 'y', 'j', 's', 'r', 'g', 'b', 'c', 'd', 'h', 'n', 'p',
                                'o', 'a', 'e', 'f', 't', 'k', }, //
                        { 'y', 'e', 'v', 't', 'w', 'f', 'i', 'o', 'j', 'd', 'q', 's', 'l', 'm', 'n', 'g', 'a', 'c', 'k',
                                'u', 'r', 'b', 'h', 'x', 'p', }, //
                        { 's', 'p', 'k', 'b', 'j', 'h', 'y', 'g', 'c', 'a', 'd', 'x', 't', 'u', 'o', 'e', 'f', 'r', 'l',
                                'q', 'm', 'n', 'v', 'w', 'i', }, //
                        { 'd', 'l', 'a', 'u', 'r', 'q', 's', 'v', 'x', 'k', 'b', 'y', 'c', 'g', 'i', 'h', 'm', 'p', 'w',
                                'n', 'j', 't', 'o', 'f', 'e', }, //
                        { 'm', 'c', 'q', 'h', 'o', 'w', 'l', 'n', 'b', 'p', 'f', 'e', 'j', 'r', 'a', 'i', 'd', 'x', 'v',
                                't', 'y', 'g', 'k', 'u', 's', }, //
                        { 'x', 'f', 'i', 'n', 'g', 'e', 'm', 'u', 't', 'r', 'k', 'h', 'w', 'v', 'p', 'j', 'b', 'o', 'y',
                                's', 'l', 'a', 'c', 'q', 'd', }, //
                        { 'o', 'y', 'm', 'e', 'i', 'n', 'x', 'f', 'k', 'q', 'r', 'g', 'a', 'w', 'j', 'l', 'c', 'u', 'd',
                                'b', 't', 's', 'p', 'h', 'v', }, //
                        { 'p', 'h', 's', 'l', 'n', 'j', 'w', 'm', 'd', 'o', 'v', 'i', 'e', 't', 'b', 'k', 'q', 'y', 'g',
                                'a', 'u', 'f', 'x', 'r', 'c', }, //
                        { 'j', 'w', 'f', 'g', 'x', 'u', 't', 'y', 'r', 'l', 'p', 'o', 'd', 'c', 'k', 'm', 's', 'v', 'i',
                                'h', 'e', 'q', 'a', 'n', 'b', }, //
                        { 'v', 't', 'd', 'a', 'c', 'b', 'p', 's', 'i', 'g', 'h', 'm', 'q', 'x', 'u', 'n', 'r', 'j', 'e',
                                'f', 'w', 'k', 'l', 'y', 'o', }, //
                        { 'u', 'b', 'r', 'k', 'q', 'c', 'a', 'h', 'v', 'e', 'y', 'n', 's', 'l', 'f', 'o', 't', 'w', 'x',
                                'p', 'i', 'd', 'j', 'g', 'm', }, //
                        { 'l', 'x', 'j', 'd', 'm', 'o', 'v', 'r', 'e', 'u', 'w', 'b', 'f', 'y', 's', 'p', 'n', 't', 'a',
                                'g', 'h', 'c', 'i', 'k', 'q', }, //
                        { 'a', 'n', 'g', 'w', 'p', 'l', 'd', 'k', 'h', 's', 'i', 'v', 'r', 'q', 't', 'u', 'o', 'e', 'f',
                                'c', 'x', 'y', 'b', 'm', 'j', }, //
                        { 'q', 'v', 'u', 'c', 'k', 't', 'j', 'x', 'f', 'b', 'o', 'a', 'n', 'h', 'l', 'r', 'y', 'i', 'm',
                                'd', 'p', 'w', 's', 'e', 'g', }, //
                        { 'i', 'r', 'h', 's', 'f', 'y', 'n', 'a', 'w', 'c', 'm', 'd', 'p', 'e', 'g', 'q', 'x', 'b', 'j',
                                'k', 'o', 'v', 'u', 'l', 't', }, //
                        { 'b', 'o', 't', 'y', 'e', 'm', 'q', 'p', 'g', 'i', 'j', 'c', 'u', 'k', 'x', 'w', 'v', 's', 'h',
                                'l', 'f', 'r', 'd', 'a', 'n', }, //
                        { 't', 'g', 'w', 'x', 'd', 'i', 'h', 'c', 'q', 'm', 'l', 'f', 'y', 'o', 'v', 's', 'u', 'a', 'n',
                                'j', 'k', 'p', 'e', 'b', 'r', }, //
                        { 'c', 'i', 'n', 'm', 'b', 'v', 'k', 'j', 'l', 'x', 'g', 'p', 'h', 's', 'r', 'y', 'w', 'f', 'o',
                                'e', 'q', 'u', 't', 'd', 'a', }, //
                        { 'f', 'q', 'p', 'o', 's', 'a', 'g', 'd', 'u', 'w', 'c', 'j', 'm', 'n', 'e', 't', 'k', 'h', 'b',
                                'r', 'v', 'x', 'y', 'i', 'l', }, //
                        { 'h', 'j', 'e', 'r', 'a', 'p', 'b', 't', 's', 'y', 'u', 'k', 'x', 'i', 'w', 'v', 'l', 'd', 'q',
                                'm', 'n', 'o', 'g', 'c', 'f', }, //
                        { 'k', 'u', 'y', 'v', 'l', 'r', 'o', 'e', 'n', 'f', 'a', 't', 'b', 'd', 'q', 'x', 'p', 'g', 'c',
                                'i', 's', 'm', 'w', 'j', 'h', }, //
                });
    }

    @Test
    public void worldsHardest() {
        final Puzzle9x9 model = test(new Puzzle9x9(),
                new char[][] { //
                        { '8', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' }, //
                        { ' ', ' ', '3', '6', ' ', ' ', ' ', ' ', ' ' }, //
                        { ' ', '7', ' ', ' ', '9', ' ', '2', ' ', ' ' }, //
                        { ' ', '5', ' ', ' ', ' ', '7', ' ', ' ', ' ' }, //
                        { ' ', ' ', ' ', ' ', '4', '5', '7', ' ', ' ' }, //
                        { ' ', ' ', ' ', '1', ' ', ' ', ' ', '3', ' ' }, //
                        { ' ', ' ', '1', ' ', ' ', ' ', ' ', '6', '8' }, //
                        { ' ', ' ', '8', '5', ' ', ' ', ' ', '1', ' ' }, //
                        { ' ', '9', ' ', ' ', ' ', ' ', '4', ' ', ' ' }, //
                });

        assertEquals(model,
                new char[][] { //
                        { '9', '3', '1', '4', '5', '8', '2', '6', '7', }, //
                        { '2', '7', '4', '6', '3', '9', '1', '5', '8', }, //
                        { '6', '8', '5', '7', '1', '2', '3', '4', '9', }, //
                        { '5', '4', '8', '3', '6', '1', '7', '9', '2', }, //
                        { '1', '2', '3', '9', '4', '7', '5', '8', '6', }, //
                        { '7', '9', '6', '8', '2', '5', '4', '1', '3', }, //
                        { '3', '6', '2', '5', '9', '4', '8', '7', '1', }, //
                        { '4', '1', '7', '2', '8', '6', '9', '3', '5', }, //
                        { '8', '5', '9', '1', '7', '3', '6', '2', '4', }, //
                });
    }

    private static <T extends PuzzleModel<?>> T test(final T model, final char[][] data) {
        final long startTime = System.currentTimeMillis();

        model.init();
        for (int y = 0; y < data.length; y++) {
            for (int x = 0; x < data[0].length; x++) {
                if (data[y][x] == '-')
                    data[y][x] = ' ';
                if (data[y][x] != ' ')
                    model.setValue(x, y, data[y][x]);
            }
        }

        SolverFactory.solve(model);

        final List<Validator> validators = new ArrayList<>();
        validators.add(new HorizontalValidator());
        validators.add(new VerticalValidator());
        validators.add(new BoxValidator());
        for (int i = 0; i < validators.size(); i++) {
            validators.get(i).validate(model);
        }

        final String time = Long.toString((System.currentTimeMillis() - startTime) / 1000);
        model.dump();
        if (model.isSolved())
            System.out.println("Puzzle was solved in " + time + " s");
        else
            System.out.println("Puzzle was not solved in " + time + " s");

        return model;
    }

    private static void assertEquals(final PuzzleModel<?> model, final char[][] solution) {
        for (int y = 0; y < solution.length; y++) {
            for (int x = 0; x < solution[0].length; x++) {
                if (solution[y][x] != model.getSolvedValue(x, y).charValue()) {
                    throw new AssertionError("Expected " + solution[y][x] + " but found "
                            + model.getSolvedValue(x, y).charValue() + " at " + x + "," + y);
                }
            }
        }
    }
}
